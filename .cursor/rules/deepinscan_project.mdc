# DeepinScan 项目开发规范

DeepinScan是一个基于C++17、Qt5和DTK开发的现代化扫描仪驱动框架。本规则定义了项目特定的开发规范和最佳实践。

## 项目架构理解

### 核心技术栈
- **语言**: Modern C++17
- **图形框架**: Qt5 + DTK (Deepin Tool Kit)
- **构建系统**: CMake 3.16+
- **目标平台**: Linux (主要支持Deepin/UOS)
- **开源协议**: GPL-3.0-or-later

### 项目结构
```
deepinscan/
├── include/Scanner/          # 公共头文件接口
├── src/
│   ├── core/                # 核心设备抽象层
│   ├── drivers/             # 厂商驱动实现
│   ├── communication/       # USB/网络通信层
│   ├── processing/          # 图像处理管道
│   └── gui/                 # DTK图形界面
├── tests/                   # 单元测试和集成测试
├── examples/                # 使用示例代码
└── docs/                    # 项目文档
```

## 代码规范要求

### 1. 编码规范
- **严格遵循**: [Deepin代码规范](https://github.com/linuxdeepin/deepin-styleguide/tree/master/qt/)
- **命名规范**: 
  - 类名: `PascalCase` (如 `DScannerDevice`)
  - 函数/变量: `camelCase` (如 `openDevice`)
  - 成员变量: `m_` 前缀 (如 `m_deviceList`)
  - 私有实现类成员: 不使用 `m_` 前缀

### 2. 头文件组织
- **公共接口**: 放置在 `include/Scanner/` 目录
- **私有实现**: 使用Pimpl模式，私有头文件以 `_p.h` 结尾
- **包含路径**: 使用 `#include "Scanner/DScannerXXX.h"` 格式

### 3. 内存管理
- **优先使用**: 智能指针 (`std::unique_ptr`, `QScopedPointer`)
- **Qt对象**: 利用Qt父子对象树自动管理
- **禁止**: 在同一QObject上混用Qt父子关系和外部智能指针管理

### 4. 错误处理
- **异常机制**: 使用 `DScannerException` 及其子类
- **错误码**: 在不适合异常的场景使用明确的错误枚举
- **输入验证**: 所有公共API必须验证输入参数

## DTK开发特点

### 1. DTK组件优先
- **优先使用**: DTK控件而非原生Qt控件
- **主题支持**: 遵循Deepin设计语言，支持浅色/深色主题
- **应用架构**: 基于 `DApplication` 和 `DMainWindow`

### 2. 界面设计
- **设计规范**: 完全遵循Deepin设计规范
- **响应式**: 支持不同屏幕尺寸和分辨率
- **动画效果**: 流畅的界面切换和交互动画

## 日志规范

### 1. 日志级别
- **qCDebug**: 详细的调试信息，开发期使用
- **qCInfo**: 重要的系统事件和状态变化
- **qCWarning**: 潜在问题警告，程序可继续运行
- **qCCritical**: 严重错误，功能可能无法正常工作

### 2. 日志内容
- **语言**: 所有日志使用英文
- **格式**: 简明清晰，包含足够上下文信息
- **分类**: 使用 `Q_LOGGING_CATEGORY` 进行模块化分类

### 3. 关键记录点
- 设备发现和连接状态变化
- 扫描任务的开始、进度和完成
- 图像处理算法的执行和结果
- 网络通信和USB通信的关键事件
- 错误和异常情况

## 功能模块开发

### 1. 设备驱动开发
- **基类继承**: 继承 `DScannerDriver` 基类
- **设备识别**: 实现 `detectDevice()` 方法
- **SANE兼容**: 考虑与SANE协议的兼容性
- **厂商特性**: 在drivers/vendors/目录下组织厂商特定代码

### 2. 图像处理开发
- **管道架构**: 基于 `DScannerImageProcessor` 的处理管道
- **算法优化**: 考虑SIMD优化和多线程并行
- **内存效率**: 大图像的分块处理和内存优化
- **格式支持**: 支持主流图像格式(PNG, JPEG, TIFF, PDF)

### 3. 网络功能开发
- **协议支持**: mDNS、SOAP等网络发现协议
- **异步通信**: 使用Qt的异步网络机制
- **设备管理**: 网络设备的连接状态监控
- **错误恢复**: 网络中断的自动重连机制

## 测试要求

### 1. 单元测试
- **框架**: 使用GTest + QTest组合
- **覆盖率**: 核心功能测试覆盖率>80%
- **打桩**: 使用cpp-stub进行外部依赖隔离
- **AIR原则**: 自动化、独立性、可重复性

### 2. 集成测试
- **设备测试**: 真实设备的兼容性测试
- **性能测试**: 扫描速度和内存使用测试
- **UI测试**: DTK界面的功能和交互测试

## 文档规范

### 1. 代码注释
- **公共API**: 使用Doxygen格式的英文注释
- **算法逻辑**: 复杂算法添加详细的实现说明
- **设计决策**: 记录重要的设计决策和权衡

### 2. 用户文档
- **README**: 项目概述、构建指南、使用方法
- **API文档**: 完整的接口文档和示例代码
- **开发指南**: 贡献代码的指导文档

## 性能优化

### 1. 扫描性能
- **目标**: 设备检测<3秒，扫描启动<2秒
- **内存**: 总内存使用<100MB
- **CPU**: 扫描过程CPU使用率<30%

### 2. 图像处理性能
- **并行处理**: 充分利用多核CPU
- **SIMD优化**: 关键算法使用SIMD指令
- **内存对齐**: 优化内存访问模式

## 兼容性要求

### 1. 设备兼容性
- **目标**: 支持6000+扫描设备
- **SANE**: 兼容现有SANE后端
- **厂商驱动**: Genesys、Canon、Epson、HP等主流厂商

### 2. 系统兼容性
- **主要平台**: Deepin、UOS
- **Qt版本**: Qt 5.12+
- **编译器**: GCC 7+, Clang 6+

## 版本管理

### 1. Git规范
- **分支策略**: 功能分支基于main分支开发
- **提交信息**: 英文提交信息，格式为 `fix: description` 或 `feat: description`
- **版权声明**: 所有文件包含 `SPDX-FileCopyrightText: 2024-2025 eric2023`

### 2. 发布管理
- **版本号**: 语义化版本控制
- **发布注记**: 详细的功能变更和修复说明
- **向后兼容**: API变更保持向后兼容性
description:
globs:
alwaysApply: false
---
